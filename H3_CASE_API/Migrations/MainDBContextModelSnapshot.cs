// <auto-generated />
using System;
using H3_CASE_API.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace H3_CASE_API.Migrations
{
    [DbContext(typeof(MainDBContext))]
    partial class MainDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("H3_CASE_API.Entities.Addrese", b =>
                {
                    b.Property<int>("AddreseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddreseID"), 1L, 1);

                    b.Property<string>("Addrese_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("AddreseID");

                    b.HasIndex("Contact_InformaitionID");

                    b.HasIndex("PostalCode");

                    b.ToTable("Addrese");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Contact_Informaition", b =>
                {
                    b.Property<int>("Contact_InformaitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contact_InformaitionID"), 1L, 1);

                    b.Property<int>("Contact_TypeID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_InformaitionID");

                    b.HasIndex("Contact_TypeID");

                    b.ToTable("Contact_Informaition");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Contact_Type", b =>
                {
                    b.Property<int>("Contact_TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contact_TypeID"), 1L, 1);

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_TypeID");

                    b.ToTable("Contact_Type");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("Contact_InformaitionID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Delivery_Service", b =>
                {
                    b.Property<int>("Delivery_ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Delivery_ServiceID"), 1L, 1);

                    b.Property<string>("Courier_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Delivery_ServiceID");

                    b.ToTable("Delivery_Service");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"), 1L, 1);

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("Contact_InformaitionID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("Contact_InformaitionID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Manufactor", b =>
                {
                    b.Property<int>("ManufactorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufactorID"), 1L, 1);

                    b.Property<string>("Manufactor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufactorID");

                    b.ToTable("Manufactor");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("OrderLineID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdersID"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delivery_ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Shipment_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("Delivery_ServiceID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.PostalCodes", b =>
                {
                    b.Property<int>("PostalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostalCode"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCode");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<double>("In_Price")
                        .HasColumnType("float");

                    b.Property<int>("ManufactorID")
                        .HasColumnType("int");

                    b.Property<double>("Out_Price")
                        .HasColumnType("float");

                    b.Property<string>("Product_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_StatusID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ManufactorID");

                    b.HasIndex("Product_StatusID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Product_Status", b =>
                {
                    b.Property<int>("Product_StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_StatusID"), 1L, 1);

                    b.Property<string>("Status_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_StatusID");

                    b.ToTable("Product_Status");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Product_Stock", b =>
                {
                    b.Property<int>("Product_StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_StockID"), 1L, 1);

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("Product_StockID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Product_Stock");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Users", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseID"), 1L, 1);

                    b.Property<int>("Contact_InformaitionID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.HasKey("WarehouseID");

                    b.HasIndex("Contact_InformaitionID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Addrese", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Informaition", "Contact_Informaition")
                        .WithMany("Addrese")
                        .HasForeignKey("Contact_InformaitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.PostalCodes", "PostalCodes")
                        .WithMany()
                        .HasForeignKey("PostalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Informaition");

                    b.Navigation("PostalCodes");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Contact_Informaition", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Type", "Contact_Type")
                        .WithMany()
                        .HasForeignKey("Contact_TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Type");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Customer", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Informaition", "Contact_Informaition")
                        .WithMany()
                        .HasForeignKey("Contact_InformaitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Informaition");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Department", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Informaition", "Contact_Informaition")
                        .WithMany()
                        .HasForeignKey("Contact_InformaitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Informaition");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Employee", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Informaition", "Contact_Informaition")
                        .WithMany()
                        .HasForeignKey("Contact_InformaitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Informaition");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.OrderLine", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Orders", "Orders")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Orders", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Delivery_Service", "Delivery_Service")
                        .WithMany()
                        .HasForeignKey("Delivery_ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Delivery_Service");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Product", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Manufactor", "Manufactor")
                        .WithMany()
                        .HasForeignKey("ManufactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Product_Status", "Product_Status")
                        .WithMany()
                        .HasForeignKey("Product_StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufactor");

                    b.Navigation("Product_Status");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Product_Stock", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Warehouse", "Warehouse")
                        .WithMany("Product_Stocks")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Warehouse", b =>
                {
                    b.HasOne("H3_CASE_API.Entities.Contact_Informaition", "Contact_Informaition")
                        .WithMany()
                        .HasForeignKey("Contact_InformaitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3_CASE_API.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Informaition");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Contact_Informaition", b =>
                {
                    b.Navigation("Addrese");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Orders", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("H3_CASE_API.Entities.Warehouse", b =>
                {
                    b.Navigation("Product_Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
